var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"For ordinary periodic Schur decompositions, the basic API is as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p = period_of_your_problem()\nAarg = [your_matrix(j) for j in 1:p]\npS = pschur!(Aarg)\nyour_eigvals = pS.values","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The result pS is a PeriodicSchur object. Computation of the Schur vectors is fairly expensive, so it may be suppressed via keyword arguments.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For generalized PSD, the basic API is as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p = period_of_your_problem()\nAarg = [your_complex_matrix(j) for j in 1:p]\nS = [sign_for_your_problem(j) for j in 1:p]\ngpS = pschur!(Aarg, S)\nyour_eigvals = gpS.values","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The result gpS is a GeneralizedPeriodicSchur object.","category":"page"},{"location":"lib/public/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"lib/public/#Periodic-Schur-decompositions","page":"Functions","title":"Periodic Schur decompositions","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"pschur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.pschur","page":"Functions","title":"PeriodicSchurDecompositions.pschur","text":"pschur(A::Vector{S<:StridedMatrix}) -> F::PeriodicSchur\n\nComputes a periodic Schur decomposition of a series of general square matrices.\n\nOptional arguments wantT and wantZ, defaulting to true, are booleans which may be used to save time and memory by suppressing computation of the T and Z matrices. See PeriodicSchur for the resulting structure.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"pschur!","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.pschur!","page":"Functions","title":"PeriodicSchurDecompositions.pschur!","text":"pschur!(A::Vector{S<:StridedMatrix}) -> F::PeriodicSchur\n\nSame as pschur but uses the input matrices A as workspace.\n\n\n\n\n\npschur!(H1,Hs) -> PeriodicSchur\n\nComputes a periodic Schur decomposition of a series of Hessenberg/triangular matrices.\n\nIf not wantT then just compute the eigenvalues. If wantZ then also compute orthogonal transformation matrices: if Q is unset, these will be the Zⱼ; if Q is set to a vector of matrices Qⱼ, they will be the products QⱼZⱼ.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Periodic-Hessenberg-decompositions","page":"Functions","title":"Periodic Hessenberg decompositions","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"phessenberg!","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.phessenberg!","page":"Functions","title":"PeriodicSchurDecompositions.phessenberg!","text":"phessenberg!(A::Vector{<:AbstractMatrix}) -> (Hessenberg, Vector{QR})\n\nreduce a series of p matrices A = [A₁ A₂ ... Aₚ] to upper Hessenberg/triangular form via a cycle of orthogonal similarity transformations\n\nQ₁'A₁Q₂ = H₁ Q₂'A₂Q₃ = H₂ Qₚ'AₚQ₁ = Hₚ\n\nH₁ is upper Hessenberg, the other Hⱼ are upper triangular.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Types","page":"Functions","title":"Types","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"PeriodicSchur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.PeriodicSchur","page":"Functions","title":"PeriodicSchurDecompositions.PeriodicSchur","text":"PeriodicSchur\n\nMatrix factorization type of the periodic Schur factorization of a series of matrices. This is the return type of pschur!(_).\n\nFor a series A₁, A₂, ... Aₚ, the decomposition is Z₁' * A₁ * Z₂ = T₁; Z₂' * A₂ * Z₃ = T₂; ...; Zₚ' * Aₚ * Z₁ = Tₚ.\n\nFor real element types, T₁ is a quasi-triangular \"real Schur\" matrix. Otherwise the Tⱼ are upper triangular. The Zⱼ are unitary (orthogonal for reals).\n\nGiven F::PeriodicSchur, the (quasi) triangular Schur factor T₁ can be obtained via F.T1.  F.T is a vector of the remaining triangular Tⱼ. F.Z is a vector of the Zⱼ. F.values is a vector of the eigenvalues of the product of the Aⱼ.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PeriodicSchurDecompositions","category":"page"},{"location":"#PeriodicSchurDecompositions.jl","page":"Home","title":"PeriodicSchurDecompositions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides implementations of the periodic Schur decomposition of matrix products of real element types and of the generalized periodic Schur decomposition for complex element types.","category":"page"},{"location":"#Definitions","page":"Home","title":"Definitions","text":"","category":"section"},{"location":"#Periodic-Schur-decomposition","page":"Home","title":"Periodic Schur decomposition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given a series of NxN matrices A[j], j=1...p, a periodic Schur decomposition (PSD) is a factorization of the form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Q[1]'*A[1]*Q[2] = T[1]\nQ[2]'*A[2]*Q[3] = T[2]\n...\nQ[p]'*A[p]*Q[1] = T[p]","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the Q[j] are unitary (orthogonal) and the T[j] are upper triangular, except that one of the T[j] is quasi-triangular for real element types. It furnishes the eigenvalues and invariant subspaces of the matrix product prod(A).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The principal reason for using the PSD is that accuracy may be lost if one forms the product of the A_j before eigen-analysis. For some applications the intermediate Schur vectors are also useful.","category":"page"},{"location":"#Generalized-Periodic-Schur-decomposition","page":"Home","title":"Generalized Periodic Schur decomposition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given a series of NxN matrices A[j], j=1...p, and a signature vector S where S[j] is 1 or -1, a generalized periodic Schur decomposition (GPSD) is a factorization of the formal product A[1]^(S[1]*A[2]^(S[2]*...*A[p]^(S[p]): Q[j]' * A[j] * Q[j+1] = T[j] if S[j] == 1 and Q[j+1]' * A[j] * Q[j] = T[j] if S[j] == -1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GPSD is an extension of the QZ decomposition used for generalized eigenvalue problems.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A. Bojanczyk, G. Golub, and P. Van Dooren, \"The periodic Schur decomposition. Algorithms and applications,\" Proc. SPIE 1996.","category":"page"},{"location":"","page":"Home","title":"Home","text":"D. Kressner, thesis and assorted articles.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The meat of this package is mainly a translation of implementations in the SLICOT library.","category":"page"}]
}
