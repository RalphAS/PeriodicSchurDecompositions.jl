var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"For ordinary periodic Schur decompositions, the basic API is as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p = period_of_your_problem()\nAarg = [your_matrix(j) for j in 1:p]\npS = pschur!(Aarg, :R)\nyour_eigvals = pS.values","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The result pS is a PeriodicSchur object. Computation of the Schur vectors is fairly expensive, so it may be suppressed via keyword arguments (wantZ=false).","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For generalized PSD, the basic API is as follows:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"p = period_of_your_problem()\nAarg = [your_complex_matrix(j) for j in 1:p]\nS = [sign_for_your_problem(j) for j in 1:p] # a vector of `Bool`, true for positive.\ngpS = pschur!(Aarg, S, :R)\nyour_eigvals = gpS.values","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The result gpS is a GeneralizedPeriodicSchur object.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"For a partial periodic Schur decomposition, the basic API is","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"    pps, hist = partial_pschur(Aarg, nev, which; kw...)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The result is a PartialPeriodicSchur object pps, with a summary hist of the iteration. pps usually includes the nev eigenvalues nearest the edge of the convex hull of the spectrum specified by which. The interface is derived from the ArnoldiMethod package, q.v. for additional details.","category":"page"},{"location":"usage/#Operator-ordering","page":"Usage","title":"Operator ordering","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The :R argument indicates that the product represented by pS is prod(Aarg) i.e., counting rightwards. In many applications it is more convenient to number the matrices leftwards (A[p]*...*A[2]*A[1]), corresponding to an orientation argument :L.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"At present, partial_pschur is only implemented for the left orientation.","category":"page"},{"location":"lib/public/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"lib/public/#Periodic-Schur-decompositions","page":"Functions","title":"Periodic Schur decompositions","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"pschur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.pschur","page":"Functions","title":"PeriodicSchurDecompositions.pschur","text":"pschur(A::Vector{S<:StridedMatrix}, lr::Symbol) -> F::PeriodicSchur\n\nComputes a periodic Schur decomposition of a series of general square matrices with left (lr=:L) or right (lr=:R) product ordering.\n\nOptional arguments wantT and wantZ, defaulting to true, are booleans which may be used to save time and memory by suppressing computation of the T and Z matrices. See PeriodicSchur for the resulting structure.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"pschur!","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.pschur!","page":"Functions","title":"PeriodicSchurDecompositions.pschur!","text":"pschur!(A::Vector{S<:StridedMatrix}, lr::Symbol=:R) -> F::PeriodicSchur\n\nSame as pschur but uses the input matrices A as workspace.\n\n\n\n\n\npschur!(H1,Us; Q) -> [`PeriodicSchur`](@ref)\n\nComputes a periodic Schur decomposition of a series of Hessenberg/upper-triangular matrices.\n\nH1 must be upper Hessenberg, Us a vector of upper triangular matrices. The argument arrays are overwritten and used in the result.\n\nKeyword arguments: The result corresponds to the rightwards product H1*prod(Us) unless the optional argument rev=true is specified. Specify wantT=false to compute eigenvalues, but not the Schur factors. Specify wantZ=false to suppress computation of orthogonal transformation matrices. if Q is not provided, these will be the Zⱼ factors; if Q is set to a vector of matrices Qⱼ, they will be the products QⱼZⱼ.\n\n\n\n\n\npschur!(A::Vector{<:StridedMatrix}, S::Vector{Bool}, lr::Symbol) -> F::GeneralizedPeriodicSchur\n\nComputes a generalized periodic Schur decomposition of a series of general square matrices with left (lr=:L) or right (lr=:R) orientation.\n\nEntries in S must be false for the corresponding entries in A which are effectively inverted, and true for the rest. Currently Sⱼ must be true for the leftmost term.\n\nOptional arguments wantT and wantZ, defaulting to true, are booleans which may be used to save time and memory by suppressing computation of the T and Z matrices. See GeneralizedPeriodicSchur for the resulting structure. (S[j]=false corresponds to sⱼ=-1 in the decomposition shown there.)\n\n\n\n\n\n","category":"function"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"gpschur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.gpschur","page":"Functions","title":"PeriodicSchurDecompositions.gpschur","text":"gpschur(As, Bs) -> F::GeneralizedPeriodicSchur\n\nComputes a generalized periodic Schur decomposition corresponding to the formal product         Bₚ⁻¹Aₚ...B₁⁻¹A₁ of paired series of matrices in left operator order [A₁,...,Aₚ],[B₁,...,Bₚ].\n\nTerms in the decomposition are actually shifted by one; this does not change the eigenvalues but requires attention when dealing with invariant subspaces.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"LinearAlgebra.ordschur!(::PeriodicSchurDecompositions.AbstractPeriodicSchur{T}, ::AbstractVector{Bool}) where {T <: Complex}","category":"page"},{"location":"lib/public/#LinearAlgebra.ordschur!-Union{Tuple{T}, Tuple{PeriodicSchurDecompositions.AbstractPeriodicSchur{T}, AbstractVector{Bool}}} where T<:Complex","page":"Functions","title":"LinearAlgebra.ordschur!","text":"ordschur!(P::AbstractPeriodicSchur{T}, select::AbstractVector{Bool})\n\nreorder a periodic Schur decomposition so that the eigenvalues corresponding to true entries in select and their associated subspace are moved to the top.\n\n\n\n\n\n","category":"method"},{"location":"lib/public/#Partial-periodic-Schur-decompositions","page":"Functions","title":"Partial periodic Schur decompositions","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"partial_pschur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.partial_pschur","page":"Functions","title":"PeriodicSchurDecompositions.partial_pschur","text":"partial_pschur(As, nev, which; kwargs...) → PartialPeriodicSchur, ArnoldiMethod.History\n\nFind a nev-order partial periodic Schur decomposition  of the product Aₚ*...*A₂*A₁ with eigenvalues near a specified region of the spectral boundary.\n\nThe elements Aⱼ can be matrices or any linear maps that implement mul!(y, Aⱼ, x), eltype and size.\n\nThe method will run iteratively until the Schur vectors are approximated to the prescribed tolerance or until restarts restarts have passed.\n\nArguments\n\nName Type Default Description\nnev Int min(6, size(A, 1)) Number of eigenvalues\nwhich Target LM() One of LM(), LR(), SR(), LI(), SI(), see below.\n\nThe most important keyword arguments:\n\nKeyword Type Default Description\ntol Real √eps Tolerance for convergence: ‖AV - VT‖₂ < tol * ‖λ‖\nmaxdim Int max(20,2*nev) order of working Krylov subspace\nrestarts Int 100 limit on restart iterations\n\nThe target which can be any appropriate subtype of ArnoldiMethod.Target.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Periodic-Hessenberg-decompositions","page":"Functions","title":"Periodic Hessenberg decompositions","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"phessenberg!","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.phessenberg!","page":"Functions","title":"PeriodicSchurDecompositions.phessenberg!","text":"phessenberg!(A::Vector{<:AbstractMatrix}) -> (Hessenberg, Vector{QR})\n\nreduce a series of p matrices A = [A₁ A₂ ... Aₚ] to upper Hessenberg/triangular form via a cycle of orthogonal similarity transformations\n\nQ₁'A₁Q₂ = H₁ Q₂'A₂Q₃ = H₂ Qₚ'AₚQ₁ = Hₚ\n\nH₁ is upper Hessenberg, the other Hⱼ are upper triangular.\n\n\n\n\n\n","category":"function"},{"location":"lib/public/#Types","page":"Functions","title":"Types","text":"","category":"section"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"PeriodicSchur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.PeriodicSchur","page":"Functions","title":"PeriodicSchurDecompositions.PeriodicSchur","text":"PeriodicSchur\n\nMatrix factorization type of the periodic Schur factorization of a series A₁, A₂, ... Aₚ of matrices. This is the return type of pschur!(_).\n\nThe orientation property may be 'L'(left), corresponding to the product  Aₚ * Aₚ₋₁ * ... * A₂ * A₁ or 'R'(right), for the product A₁ * A₂ * ... * Aₚ.\n\nThe decomposition for the \"right\" orientation is Z₁' * A₁ * Z₂ = T₁; Z₂' * A₂ * Z₃ = T₂; ...; Zₚ' * Aₚ * Z₁ = Tₚ.\n\nThe decomposition for the \"left\" orientation is Z₂' * A₁ * Z₁ = T₁; Z₃' * A₂ * Z₂ = T₂; ...; Z₁' * Aₚ * Zₚ = Tₚ.\n\nFor real element types, Tₖ is a quasi-triangular \"real Schur\" matrix, where k is the value of the schurindex field. Otherwise the Tⱼ are upper triangular. The Zⱼ are unitary (orthogonal for reals).\n\nGiven F::PeriodicSchur, the (quasi) triangular Schur factor Tₖ can be obtained via F.T1.  F.T is a vector of the remaining triangular Tⱼ. F.Z is a vector of the Zⱼ. F.values is a vector of the eigenvalues of the product of the Aⱼ.\n\n\n\n\n\n","category":"type"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"GeneralizedPeriodicSchur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.GeneralizedPeriodicSchur","page":"Functions","title":"PeriodicSchurDecompositions.GeneralizedPeriodicSchur","text":"GeneralizedPeriodicSchur\n\nMatrix factorization type of the generalized periodic Schur factorization of a series A₁, A₂, ... Aₚ of matrices. This is the return type of pschur!(_) with a sign vector.\n\nThe orientation property may be 'L'(left), corresponding to the product  Aₚ^sₚ * Aₚ₋₁^sₚ₋₁ * ... * A₂^s₂ * A₁^s₁ or 'R'(right), for the product A₁^s₁ * A₂^s₂ * ... * Aₚ^sₚ, where the signs sⱼ are '±1`.\n\nThe decomposition for the \"right\" orientation is Zⱼ' * Aⱼ * Zᵢ = Tⱼ where i=mod(j,p)+1 if sⱼ=1, and Zᵢ' * Aⱼ * Zⱼ = Tⱼ if sⱼ=-1.\n\nThe decomposition for the \"left\" orientation is Zᵢ' * Aⱼ * Zⱼ = Tⱼ  where i=mod(j,p)+1 if sⱼ=1, and Zⱼ' * Aⱼ * Zᵢ = Tⱼ if sⱼ=-1.\n\nFor real element types, Tₖ is a quasi-triangular \"real Schur\" matrix, where k is the value of the schurindex field. Otherwise the Tⱼ are upper triangular. The Zⱼ are unitary (orthogonal for reals).\n\nGiven F::GeneralizedPeriodicSchur, the (quasi) triangular Schur factor Tₖ can be obtained via F.T1.  F.T is a vector of the remaining triangular Tⱼ. F.Z is a vector of the Zⱼ. F.values is a vector of the eigenvalues of the product of the Aⱼ. (The eigenvalues are stored internally in scaled form to avoid over/underflow.)\n\n\n\n\n\n","category":"type"},{"location":"lib/public/","page":"Functions","title":"Functions","text":"PartialPeriodicSchur","category":"page"},{"location":"lib/public/#PeriodicSchurDecompositions.PartialPeriodicSchur","page":"Functions","title":"PeriodicSchurDecompositions.PartialPeriodicSchur","text":"PartialPeriodicSchur\n\nA partial periodic Schur decomposition of a series of matrices, with k Schur vectors of length n in the Zⱼ where typically k ≪ n.\n\nThe decomposition for the \"left\" orientation is A₁ * Z₁ = Z₂ * T₁; A₂ * Z₂ = Z₃ * T₂; ...; Aₚ * Zₚ = Z₁ * Tₚ.\n\nProperties are similar to PeriodicSchur.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PeriodicSchurDecompositions","category":"page"},{"location":"#PeriodicSchurDecompositions.jl","page":"Home","title":"PeriodicSchurDecompositions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides implementations of the periodic Schur decomposition of matrix products of real element types and of the generalized periodic Schur decomposition for real and complex element types. Functions for reordering invariant subspaces are also provided. A Krylov-Schur scheme for computing extreme eigenvalues and corresponding subspaces of products of linear operators in large-dimensional spaces is also included.","category":"page"},{"location":"#Definitions","page":"Home","title":"Definitions","text":"","category":"section"},{"location":"#Periodic-Schur-decomposition","page":"Home","title":"Periodic Schur decomposition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given a series of Ntimes N matrices A_j j=1ldotsp, a periodic Schur decomposition (PSD) is a factorization of the form:","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nQ_1^prime A_1 Q_2 = T_1 \nQ_2^prime A_2 Q_3 = T_2 \nvdots \nQ_p^prime A_p Q_1 = T_p\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the Q_j are unitary (orthogonal) and the T_j are upper triangular, except that one of the T_j is quasi-triangular for real element types. It furnishes the eigenvalues and invariant subspaces of the matrix product Pi_j=1^p A_j.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The principal reason for using the PSD is that accuracy may be lost if one forms the product of the A_j before eigen-analysis. For some applications the intermediate Schur vectors are also useful.","category":"page"},{"location":"#Operator-ordering","page":"Home","title":"Operator ordering","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For many applications it is more natural to pose the matrix product in the form A_p A_p-1ldots A_2 A_1. In this case the more useful factorization is","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\nQ_2^prime A_1 Q_1 = T_1 \nQ_3^prime A_2 Q_2 = T_2 \nvdots \nQ_1^prime A_p Q_p = T_p\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"This ordering is accommodated with the ':L' (left) orientation argument to pschur!.","category":"page"},{"location":"#Generalized-periodic-Schur-decomposition","page":"Home","title":"Generalized periodic Schur decomposition","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Given a series of Ntimes N matrices A_j j=1ldotsp, and a signature vector S where s_jin 1-1, a generalized periodic Schur decomposition (GPSD) is a factorization of the formal product Pi_j=1^p A_j^s_j so that Q_j^prime A_j  Q_j+1 = T_j if s_j = 1 and Q_j+1^prime  A_j  Q_j = T_j if s_j = -1.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GPSD is an extension of the QZ decomposition used for generalized eigenvalue problems. Thus formally infinite eigenvalues are not problematic.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A. Bojanczyk, G. Golub, and P. Van Dooren, \"The periodic Schur decomposition. Algorithms and applications,\" Proc. SPIE 1996.","category":"page"},{"location":"","page":"Home","title":"Home","text":"D. Kressner, thesis and assorted articles.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The meat of this package is mainly a translation of implementations in the SLICOT library.","category":"page"}]
}
